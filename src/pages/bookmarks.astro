---
import Layout from '../layouts/Layout.astro';
import BookmarkCard from '../components/BookmarkCard.astro';
import { getBookmarks } from '../lib/db';

if (!Astro.locals.user) {
  return Astro.redirect('/login');
}

const search = Astro.url.searchParams.get('search') || undefined;
const filter = (Astro.url.searchParams.get('filter') as 'all' | 'title' | 'url' | 'description' | 'tags') || 'all';

const bookmarks = await getBookmarks(Astro.locals.runtime.env.DB, Astro.locals.user.id, search, filter);
---

<Layout title="Bookmarks - webStash">
  <div class="flex justify-between items-center mb-6">
    <h2 class="text-3xl font-bold text-slate-900">My Bookmarks</h2>
    <button
      id="addBookmarkBtn"
      class="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors font-medium"
    >
      + Add Bookmark
    </button>
  </div>

  <form id="searchForm" class="mb-6 space-y-3">
    <div class="flex gap-3">
      <div class="flex-1">
        <input
          type="text"
          id="searchInput"
          name="search"
          placeholder="Search bookmarks..."
          value={search || ''}
          class="w-full px-4 py-2 border border-slate-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
        />
      </div>
      <select
        id="filterSelect"
        name="filter"
        class="px-4 py-2 border border-slate-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent bg-white"
      >
        <option value="all" selected={filter === 'all'}>All Fields</option>
        <option value="title" selected={filter === 'title'}>Title</option>
        <option value="url" selected={filter === 'url'}>URL</option>
        <option value="description" selected={filter === 'description'}>Description</option>
        <option value="tags" selected={filter === 'tags'}>Tags</option>
      </select>
    </div>
    <button
      type="submit"
      class="w-full px-6 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors font-medium"
    >
      Search
    </button>
  </form>

  <div id="bookmarksList" class="space-y-4">
    {bookmarks.length === 0 ? (
      <div class="text-center py-16 text-slate-500">
        <p class="text-lg">No bookmarks yet. Add your first bookmark to get started!</p>
      </div>
    ) : (
      bookmarks.map(bookmark => (
        <BookmarkCard {...bookmark} />
      ))
    )}
  </div>

  <!-- Add/Edit Bookmark Modal -->
  <div id="bookmarkModal" class="hidden fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center p-4">
    <div class="bg-white rounded-lg shadow-xl w-full max-w-md p-6 relative">
      <button class="close absolute top-4 right-4 text-slate-400 hover:text-slate-600 text-2xl font-bold">
        &times;
      </button>

      <h3 id="modalTitle" class="text-2xl font-bold text-slate-900 mb-6">Add Bookmark</h3>

      <form id="bookmarkForm" class="space-y-4">
        <input type="hidden" id="bookmarkId" />

        <div>
          <label for="url" class="block text-sm font-medium text-slate-700 mb-1">
            URL
          </label>
          <input
            type="url"
            id="url"
            name="url"
            required
            class="w-full px-3 py-2 border border-slate-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
          />
        </div>

        <div>
          <label for="title" class="block text-sm font-medium text-slate-700 mb-1">
            Title
          </label>
          <input
            type="text"
            id="title"
            name="title"
            required
            class="w-full px-3 py-2 border border-slate-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
          />
        </div>

        <div>
          <label for="description" class="block text-sm font-medium text-slate-700 mb-1">
            Description
          </label>
          <textarea
            id="description"
            name="description"
            rows="3"
            class="w-full px-3 py-2 border border-slate-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
          ></textarea>
        </div>

        <div>
          <label for="tags" class="block text-sm font-medium text-slate-700 mb-1">
            Tags (comma-separated)
          </label>
          <input
            type="text"
            id="tags"
            name="tags"
            placeholder="javascript, tutorial, web"
            class="w-full px-3 py-2 border border-slate-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
          />
        </div>

        <div id="modalError" class="hidden text-sm text-red-600 bg-red-50 border border-red-200 rounded-lg p-3"></div>

        <button
          type="submit"
          class="w-full px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors font-medium"
        >
          Save Bookmark
        </button>
      </form>
    </div>
  </div>
</Layout>

<script>
  const modal = document.getElementById('bookmarkModal') as HTMLDivElement;
  const addBtn = document.getElementById('addBookmarkBtn') as HTMLButtonElement;
  const closeBtn = document.querySelector('.close') as HTMLElement;
  const form = document.getElementById('bookmarkForm') as HTMLFormElement;
  const modalTitle = document.getElementById('modalTitle') as HTMLHeadingElement;
  const modalError = document.getElementById('modalError') as HTMLDivElement;
  const searchInput = document.getElementById('searchInput') as HTMLInputElement;
  const bookmarksList = document.getElementById('bookmarksList') as HTMLDivElement;

  let isEditing = false;

  // Open modal for adding
  addBtn.addEventListener('click', () => {
    isEditing = false;
    modalTitle.textContent = 'Add Bookmark';
    form.reset();
    (document.getElementById('bookmarkId') as HTMLInputElement).value = '';
    modal.classList.remove('hidden');
  });

  // Close modal
  closeBtn.addEventListener('click', () => {
    modal.classList.add('hidden');
  });

  window.addEventListener('click', (e) => {
    if (e.target === modal) {
      modal.classList.add('hidden');
    }
  });

  // Handle form submission
  form.addEventListener('submit', async (e) => {
    e.preventDefault();
    modalError.classList.add('hidden');

    const formData = new FormData(form);
    const bookmarkId = (document.getElementById('bookmarkId') as HTMLInputElement).value;

    const tagsInput = formData.get('tags') as string;
    const tags = tagsInput ? tagsInput.split(',').map(t => t.trim()).filter(t => t) : [];

    const data = {
      url: formData.get('url'),
      title: formData.get('title'),
      description: formData.get('description') || undefined,
      tags: tags.length > 0 ? tags : undefined
    };

    try {
      const url = isEditing ? `/api/bookmarks/${bookmarkId}` : '/api/bookmarks';
      const method = isEditing ? 'PUT' : 'POST';

      const response = await fetch(url, {
        method,
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(data)
      });

      const result = await response.json() as { error?: string };

      if (response.ok) {
        window.location.reload();
      } else {
        modalError.textContent = result.error || 'Failed to save bookmark';
        modalError.classList.remove('hidden');
      }
    } catch (err) {
      modalError.textContent = 'An error occurred';
      modalError.classList.remove('hidden');
    }
  });

  // Handle edit button clicks
  document.addEventListener('click', async (e) => {
    const target = e.target as HTMLElement;

    if (target.classList.contains('edit-btn')) {
      const id = target.dataset.id;
      if (!id) return;

      try {
        const response = await fetch(`/api/bookmarks/${id}`);
        const bookmark = await response.json() as { url: string; title: string; description?: string; tags?: string[] };

        if (response.ok) {
          isEditing = true;
          modalTitle.textContent = 'Edit Bookmark';
          (document.getElementById('bookmarkId') as HTMLInputElement).value = id;
          (document.getElementById('url') as HTMLInputElement).value = bookmark.url;
          (document.getElementById('title') as HTMLInputElement).value = bookmark.title;
          (document.getElementById('description') as HTMLTextAreaElement).value = bookmark.description || '';
          (document.getElementById('tags') as HTMLInputElement).value = bookmark.tags ? bookmark.tags.join(', ') : '';
          modal.classList.remove('hidden');
        }
      } catch (err) {
        alert('Failed to load bookmark');
      }
    }

    if (target.classList.contains('delete-btn')) {
      const id = target.dataset.id;
      if (!id) return;

      if (confirm('Are you sure you want to delete this bookmark?')) {
        try {
          const response = await fetch(`/api/bookmarks/${id}`, {
            method: 'DELETE'
          });

          if (response.ok) {
            window.location.reload();
          } else {
            alert('Failed to delete bookmark');
          }
        } catch (err) {
          alert('An error occurred');
        }
      }
    }
  });

  // Handle search
  const searchForm = document.getElementById('searchForm') as HTMLFormElement;
  const filterSelect = document.getElementById('filterSelect') as unknown as HTMLSelectElement;

  searchForm.addEventListener('submit', (e) => {
    e.preventDefault();

    const search = searchInput.value;
    const filter = filterSelect.value;

    const params = new URLSearchParams();

    if (search) {
      params.append('search', search);
    }
    if (filter && filter !== 'all') {
      params.append('filter', filter);
    }

    const queryString = params.toString();
    window.location.href = queryString ? `/bookmarks?${queryString}` : '/bookmarks';
  });
</script>
